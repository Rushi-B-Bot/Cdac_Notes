git commit and add all commands  then run this command --->
git remote add origin git@github.com:Rushi99999/Cdac_Notes.git
ssh-keygen -t ed25519 -C "rushibhondave5046@gmail.com"
eval $(ssh-agent -s)
cat  ~/.ssh/id_ed25519.pub
git push -u origin master

	Amount= pi*((pow((1 + rate / 100), time)));;

#include<iostream>
#include<bits/stdc++.h>
using namespace std;

min_max() {
	int n=5,temp;
	int a[n];
	cout<<"Enter the Array : :";
	for(int i=0; i<n; i++) {
		cin>>a[i];

	}
	
	for(int i=0; i<n; i++) {
		for(int j=0; j<n-1; j++) {

			if(a[j]>a[j+1]) {
				temp=a[j];
				a[j]=a[j+1];
				a[j+1]=temp;
				
			}
		}
	
	}
	for(int i=0; i<n; i++) {
		cout<<a[i];
	}

}
int main() {
	min_max();
}
//#include <iostream>
#include<bits/stdc++.h>
#include<string>
using namespace std;

//struct Player {
//	int numPlayers ;
//	int  id;
//	string name  ;
//	string role  ;                But I just use only the class to handle this problem.
//	int	match_played ;
//	int	wikets ;
//	int	runs ;
//	int	play_innings ;
//};
static int inngs=0;
class Cricket {

		static const int NUM_FIELDS = 100;
		int  id[NUM_FIELDS];
		string name[NUM_FIELDS] ;
		string role[NUM_FIELDS] ;
		string team[NUM_FIELDS] ;
		int match_played[NUM_FIELDS];
		int runs[NUM_FIELDS];
		int Batsman_wickets[NUM_FIELDS];
		int wickets[NUM_FIELDS];
		int Bowler_runs[NUM_FIELDS];
		int mergeRuns[NUM_FIELDS];
		int numPlayers,highScore,highWkts;
		string  Batting="Batsman",Bowling="Bowler",Allrounder="BattingAllrounder";
		double Avg_runs,Bowl_Economy;
		string input13, yes="1",no="2";
		int min,max;


	public:

		void get_Player_data() {
			cout<<"Enter the Player you want to store in Data::";
			cin>>numPlayers;
			for (int i = 0; i < numPlayers; ++i) {
				cout<<"\n\t\t**********************  Player " <<"[ "<<i+1<<" ]"<< " Information **********************"<<endl;
				cout << "\nEnter the player's ID " << i + 1 << ": ";
				cin >> id[i];
				cout << "Enter the player's Name " << i + 1 << ": ";
				cin >> name[i];
				cout << "Enter the player's Role :"<< i + 1<<"  1)Batsman 2)Bowler 3)BattingAllrounder : ";
				cin >> role[i];
				cout << "Enter the player's Match Played " << i + 1 << ": ";
				cin >> match_played[i] ;

				int matchplayed=match_played[i];
				
				if(role[i]==Batting) 
				{
						cout<<"Enter the player's Runs "<<i+1<<":"<<endl;
					for(int i=0; i<matchplayed; i++) {

						do {
							cout <<"Match NO " << i + 1 << ": ";
							cin>>runs[i];
							inngs++;
							i++;
						} while(i!=matchplayed);



						cout<<"Player want to bowling in this match 1)Yes 2)No :"<<i+1<<":";
						cin>>input13;
						if(input13==yes) {
							int input1;
							cout<<" how much innges batsmen play :";
							cin>>input1;
							for(int i=0; i<input1; i++) {
								cout<<"Enter the wikets"<<i+1<<":";
								cin>>Batsman_wickets[i];
								inngs++;
							}
						}



					}

				}


				if(role[i]==Bowling) {

                    cout<<"Enter the player's Wickets "<<i+1<<":"<<endl;
					for(int i=0; i<matchplayed; i++) {

						do {
							cout<<"Enter the player's Wickets "<<i+1<<":"<<endl;
							cout <<"Match No Wickets" << i + 1 << ": ";
							cin>>wickets[i];
							inngs++;
							i++;
						} while(i!=matchplayed);

						cout<<"Player want to batting in this match 1)Yes 2)No :"<<i+1<<":";
						cin>>input13;
						if(input13==yes) {
							int input1;
							cout<<" how much innges bowler do batting play :";
							cin>>input1;
							for(int i=0; i<input1; i++) {
								cout<<"Enter the wikets"<<i+1<<":";
								cin>>Bowler_runs[i];
								inngs++;
							}
						}

					}
				}
				if(role[i]==Allrounder) {
					cout << "Enter the player's Runs " << i + 1 << ": ";
					for (int i = 0; i < matchplayed; ++i) {
						cout <<"Match NO " << i + 1 << ": ";
						cin>>runs[i];
					}

					cout << "Enter the player's Wickets " << i + 1 << ": ";
					for (int i = 0; i < matchplayed; ++i) {
						cout <<"Match No Wickets" << i + 1 << ": ";
					}



				}
				for(int i=0; i<matchplayed; i++) {
					mergeRuns[i]=runs[i];
				}
			//	min_max();


				cout<<"Which team does this player play for? 1)team Name 2)NA - "<<i+1<<":";
				cin >> team[i];

			}
				}


//		}
//		void min_max() {
//
//			max=mergeRuns[0];
//			min=mergeRuns[0];
//			for(int i=0; i<matchplayed; i++) {
//				if(max<mergeRuns[i])
//					max=mergeRuns[i];
//				else if(min>mergeRuns[i])
//					min=mergeRuns[i];
//
//			}
//
//			cout<<"\nMaximum Score :: "<<max;
//			cout<<"\nMinimum Score: "<<min;
//
//		}
		void  display_Data() 
		{
			for (int i = 0; i < numPlayers; ++i) {
				cout<<"\n\t\t**********************  Player " <<"[ "<<i+1<<" ]"<< " Information **********************"<<endl;
				cout << "\n Player's ID " << i + 1 << ": " <<id[i]<<endl;
				cout << " Player's Name " << i + 1 << ": "<<name[i]<<endl;
				cout << "Player Role" << i + 1 << ": "<< role[i]<<endl;
				cout << "Player's Match Played " << i + 1 << ": "<<match_played[i]<<endl;
				int m=match_played[i];
				 cout<<" Runs of the player :"<<endl;
				  	for(int i=0; i<m; i++) 
				  {
				      cout<<"Match No"<<i+1<<runs[i]<<endl;	
				  }
	
            }
		}

};



int main() {
	Cricket c1;
	c1.get_Player_data();
	c1.display_Data();



}

<div class="navbar">
      <div class="nav-logo">
        <a href="#">Logo</a>
      </div>
      <div class="nav-items">
        <ul>
          <li><a href="#"> Home </a></li>
          <li><a href="#"> Services </a></li>
          <li><a href="#"> About </a></li>
          <li><a href="#"> Contact </a></li>
          <li><a href="#"> Home </a></li>
        </ul>
      </div>
      <div class="nav-button">
        <div class="anim-layer"></div>
        <a href="#">Sign Up</a>
      </div>
      <div id="hamburger-menu">&#9776;</div>
    </div>

    <div id="mobile-menu">
      <div class="mobile-nav-items">
        <ul>
          <li><a href="#"> Home </a></li>
          <li><a href="#"> Services </a></li>
          <li><a href="#"> About </a></li>
          <li><a href="#"> Contact </a></li>
          <li><a href="#"> Home </a></li>
        </ul>
      </div>
      <div class="mobile-nav-button">
        <div class="anim-layer"></div>
        <a href="#">Sign Up</a>
      </div>
      <div id="hamburger-cross">&#10006;</div>
    </div>




body {
  padding: 0px;
  margin: 0px;
}

.navbar {
  position: relative;
  display: flex;
  padding: 10px;
  background-color: #141214;
  justify-content: space-around;
  align-items: center;
  box-shadow: 7px 5px 15px -4px rgba(0, 0, 0, 0.75);
  -webkit-box-shadow: 7px 5px 15px -4px rgba(0, 0, 0, 0.75);
  -moz-box-shadow: 7px 5px 15px -4px rgba(0, 0, 0, 0.75);
}

.nav-items > ul > li {
  position: relative;
  display: inline;
  list-style: none;
  margin: 10px;
  padding: 10px 20px;
  cursor: pointer;
}

.nav-items > ul > li > a {
  color: white;
  text-decoration: none;
}

.nav-items > ul > li::after {
  content: "";
  position: absolute;
  width: 100%;
  height: 0.17rem;
  background-color: #c52726;
  left: 0;
  bottom: 0;
  transform-origin: 0% 100%;
  transform: scaleX(0);
  transition: transform 0.3s ease;
}

.nav-items > ul > li:hover::after {
  transform: scaleX(1);
}

.nav-logo a,
.nav-button a {
  color: white;
  list-style: none;
  text-decoration: none;
  display: flex;
}

.nav-logo {
  font-size: 32px;
}

.nav-button {
  background-color: #c52726;
  border-radius: 50px;
  position: relative;
  display: inline-block;
  overflow: hidden;
  cursor: pointer;
}

.anim-layer {
  position: absolute;
  top: 0;
  left: 50%;
  width: 0;
  height: 100%;
  background-color: white;
  transition: width 0.3s ease, left 0.3s ease;
}

.nav-button:hover .anim-layer {
  width: 100%;
  left: 0;
}

.nav-button:hover a {
  color: #141214;
}

.nav-button a {
  display: block;
  padding: 10px 20px;
  color: white;
  text-decoration: none;
  position: relative;
  z-index: 1;
}

#hamburger-menu,
#mobile-menu {
  display: none;
}

@media only screen and (max-width: 770px) {
  #mobile-menu {
    background-color: #c52726;
    width: 100%;
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
    display: none;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    transition: transform 0.3s ease;
    transform: translateX(-100%);
  }

  .mobile-nav-items > ul {
    padding: 0px;
  }

  .mobile-nav-items > ul > li {
    text-align: center;
    position: relative;
    list-style: none;
    margin: 10px;
    padding: 10px 20px;
    cursor: pointer;
  }

  .mobile-nav-items > ul > li > a {
    color: white;
    text-decoration: none;
  }

  .mobile-nav-items > ul > li::after {
    content: "";
    position: absolute;
    width: 100%;
    height: 0.17rem;
    background-color: white;
    left: 0;
    bottom: 0;
    transform-origin: 0% 100%;
    transform: scaleX(0);
    transition: transform 0.3s ease;
  }

  .mobile-nav-items > ul > li:hover::after {
    transform: scaleX(1);
  }

  .mobile-nav-button {
    background-color: #141214;
    border-radius: 50px;
    position: relative;
    display: inline-block;
    overflow: hidden;
    cursor: pointer;
  }

  .mobile-nav-button .anim-layer {
    position: absolute;
    top: 0;
    left: 50%;
    width: 0;
    height: 100%;
    background-color: white;
    transition: width 0.3s ease, left 0.3s ease;
  }

  .mobile-nav-button:hover .anim-layer {
    width: 100%;
    left: 0;
  }

  .mobile-nav-button:hover a {
    color: #141214;
  }

  .mobile-nav-button a {
    display: block;
    padding: 10px 20px;
    color: white;
    text-decoration: none;
    position: relative;
    z-index: 1;
  }

  .nav-items > ul,
  .nav-button {
    display: none;
  }

  #hamburger-cross {
    display: block;
    color: white;
    cursor: pointer;
    font-size: 40px;
    position: absolute;
    top: 20px;
    right: 26px;
  }

  #hamburger-menu {
    display: block;
    color: white;
    cursor: pointer;
    font-size: 24px;
  }
}

